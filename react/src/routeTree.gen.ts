/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TasksImport } from './routes/tasks'
import { Route as EditImport } from './routes/edit'
import { Route as CategoriesImport } from './routes/categories'
import { Route as IndexImport } from './routes/index'
import { Route as MembersIndexImport } from './routes/members.index'
import { Route as MembersIdPrioritiesImport } from './routes/members.$id.priorities'

// Create/Update Routes

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const EditRoute = EditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesRoute = CategoriesImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MembersIndexRoute = MembersIndexImport.update({
  id: '/members/',
  path: '/members/',
  getParentRoute: () => rootRoute,
} as any)

const MembersIdPrioritiesRoute = MembersIdPrioritiesImport.update({
  id: '/members/$id/priorities',
  path: '/members/$id/priorities',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesImport
      parentRoute: typeof rootRoute
    }
    '/edit': {
      id: '/edit'
      path: '/edit'
      fullPath: '/edit'
      preLoaderRoute: typeof EditImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/members/': {
      id: '/members/'
      path: '/members'
      fullPath: '/members'
      preLoaderRoute: typeof MembersIndexImport
      parentRoute: typeof rootRoute
    }
    '/members/$id/priorities': {
      id: '/members/$id/priorities'
      path: '/members/$id/priorities'
      fullPath: '/members/$id/priorities'
      preLoaderRoute: typeof MembersIdPrioritiesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/edit': typeof EditRoute
  '/tasks': typeof TasksRoute
  '/members': typeof MembersIndexRoute
  '/members/$id/priorities': typeof MembersIdPrioritiesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/edit': typeof EditRoute
  '/tasks': typeof TasksRoute
  '/members': typeof MembersIndexRoute
  '/members/$id/priorities': typeof MembersIdPrioritiesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/edit': typeof EditRoute
  '/tasks': typeof TasksRoute
  '/members/': typeof MembersIndexRoute
  '/members/$id/priorities': typeof MembersIdPrioritiesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/edit'
    | '/tasks'
    | '/members'
    | '/members/$id/priorities'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/edit'
    | '/tasks'
    | '/members'
    | '/members/$id/priorities'
  id:
    | '__root__'
    | '/'
    | '/categories'
    | '/edit'
    | '/tasks'
    | '/members/'
    | '/members/$id/priorities'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesRoute: typeof CategoriesRoute
  EditRoute: typeof EditRoute
  TasksRoute: typeof TasksRoute
  MembersIndexRoute: typeof MembersIndexRoute
  MembersIdPrioritiesRoute: typeof MembersIdPrioritiesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesRoute: CategoriesRoute,
  EditRoute: EditRoute,
  TasksRoute: TasksRoute,
  MembersIndexRoute: MembersIndexRoute,
  MembersIdPrioritiesRoute: MembersIdPrioritiesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/categories",
        "/edit",
        "/tasks",
        "/members/",
        "/members/$id/priorities"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/categories": {
      "filePath": "categories.tsx"
    },
    "/edit": {
      "filePath": "edit.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx"
    },
    "/members/": {
      "filePath": "members.index.tsx"
    },
    "/members/$id/priorities": {
      "filePath": "members.$id.priorities.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
